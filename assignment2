<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>運動教學</title>
  <!-- Ionic CDN -->
  <script
    type="module"
    src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic/ionic.esm.js"
  ></script>
  <script
    nomodule
    src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic/ionic.js"
  ></script>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/@ionic/core/css/ionic.bundle.css"
  />
  <style>
    :root {
      --ion-color-primary: #3880ff;
      --ion-color-secondary: #3dc2ff;
      --ion-color-tertiary: #5260ff;
      --ion-color-success: #2dd36f;
      --ion-color-warning: #ffc409;
      --ion-color-danger: #eb445a;
      --ion-color-light: #f4f5f8;
      --ion-color-medium: #92949c;
      --ion-color-dark: #222428;
    }

    .item-card {
      margin: 10px;
      transition: transform 0.3s ease;
    }

    /* 登入/註冊相關樣式 */
    .auth-container {
      max-width: 500px;
      margin: 20px auto;
      padding: 20px;
    }
    
    .auth-form {
      margin-bottom: 20px;
    }
    
    .error-message {
      color: var(--ion-color-danger);
      margin-top: 5px;
    }
    
    .hidden {
      display: none;
    }
    
    .logged-in-user {
      margin-right: 10px;
      font-size: 0.9em;
      color: var(--ion-color-light);
    }
    
    .loading-spinner {
      text-align: center;
      padding: 20px;
    }
    
    /* 新增收藏篩選器樣式 */
    .favorites-filter {
      margin: 10px;
      --background: var(--ion-color-light);
      --border-radius: 8px;
    }
  </style>
</head>
<body>
  <ion-app>
    <!-- 新增登入狀態顯示 -->
    <ion-header>
      <ion-toolbar>
        <ion-title>運動教學</ion-title>
        <ion-buttons slot="end">
          <span id="loggedInUser" class="logged-in-user hidden"></span>
          <ion-button id="logoutButton" class="hidden" color="light">
            <ion-icon name="log-out" slot="icon-only"></ion-icon>
          </ion-button>
          <ion-button color="light" id="refreshButton">
            <ion-icon name="refresh" slot="icon-only"></ion-icon>
          </ion-button>
        </ion-buttons>
      </ion-toolbar>
    </ion-header>

    <!-- 登入/註冊表單區塊 -->
    <ion-content id="authContent">
      <div class="auth-container">
        <ion-card class="auth-form">
          <ion-card-header>
            <ion-card-title>登入</ion-card-title>
          </ion-card-header>
          <ion-card-content>
            <ion-item>
              <ion-label position="stacked">用戶名</ion-label>
              <ion-input id="username" type="text" required></ion-input>
            </ion-item>
            <ion-item>
              <ion-label position="stacked">密碼</ion-label>
              <ion-input id="password" type="password" required></ion-input>
            </ion-item>
            <ion-button id="loginButton" expand="block">登入</ion-button>
            <div id="loginError" class="error-message"></div>
          </ion-card-content>
        </ion-card>

        <ion-card class="auth-form">
          <ion-card-header>
            <ion-card-title>註冊</ion-card-title>
          </ion-card-header>
          <ion-card-content>
            <ion-item>
              <ion-label position="stacked">用戶名 (3-20位字母數字)</ion-label>
              <ion-input id="register-username" type="text" required minlength="3" maxlength="20"></ion-input>
            </ion-item>
            <ion-item>
              <ion-label position="stacked">密碼 (至少6位)</ion-label>
              <ion-input id="register-password" type="password" required minlength="6"></ion-input>
            </ion-item>
            <ion-button id="registerButton" expand="block">註冊</ion-button>
            <div id="registerError" class="error-message"></div>
          </ion-card-content>
        </ion-card>
      </div>
    </ion-content>

    <!-- 原有運動教學內容 (初始隱藏) -->
    <ion-content id="mainContent" class="hidden">
      <ion-searchbar id="search-input" placeholder="搜尋運動..."></ion-searchbar>
      <ion-item>
        <ion-select
          id="category-filter"
          label="運動類型"
          interface="alert"
          ok-text="確認"
          cancel-text="取消"
        >
          <!-- 選項將由JavaScript動態生成 -->
        </ion-select>
      </ion-item>
      <ion-item>
        <ion-select id="sort-by" label="排序" interface="popover">
          <ion-select-option value="">預設</ion-select-option>
          <ion-select-option value="title_asc">名稱 (A-Z)</ion-select-option>
          <ion-select-option value="title_desc">名稱 (Z-A)</ion-select-option>
          <ion-select-option value="duration_asc">時間 (短到長)</ion-select-option>
          <ion-select-option value="duration_desc">時間 (長到短)</ion-select-option>
          <ion-select-option value="difficulty_asc">難度 (低到高)</ion-select-option>
          <ion-select-option value="difficulty_desc">難度 (高到低)</ion-select-option>
        </ion-select>
      </ion-item>
      
      <!-- 新增收藏篩選器 -->
      <ion-item class="favorites-filter">
        <ion-label>只顯示已收藏項目</ion-label>
        <ion-toggle id="showFavoritesOnly"></ion-toggle>
      </ion-item>

      <ion-list id="exerciseList"></ion-list>
      
      <!-- 無限滾動指示器 -->
      <ion-infinite-scroll id="infiniteScroll">
        <ion-infinite-scroll-content
          loading-spinner="bubbles"
          loading-text="載入更多...">
        </ion-infinite-scroll-content>
      </ion-infinite-scroll>
    </ion-content>
  </ion-app>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const baseUrl = 'https://dae-mobile-assignment.hkit.cc/api';
      const state = {
        exercises: [],
        favorites: [],
        currentPage: 1,
        itemsPerPage: 10,
        totalItems: 0,
        searchQuery: '',
        selectedCategory: '',
        sortField: 'title',
        sortOrder: 'asc',
        token: localStorage.getItem('authToken') || null,
        username: localStorage.getItem('username') || null,
        isLoading: false,
        hasMore: true,
        showFavoritesOnly: false // 新增收藏篩選狀態
      };

      const elements = {
        // 原有元素
        exerciseList: document.getElementById('exerciseList'),
        searchInput: document.getElementById('search-input'),
        categoryFilter: document.getElementById('category-filter'),
        sortBy: document.getElementById('sort-by'),
        refreshButton: document.getElementById('refreshButton'),
        
        // 新增元素
        infiniteScroll: document.getElementById('infiniteScroll'),
        showFavoritesOnly: document.getElementById('showFavoritesOnly'),
        
        // 登入相關元素
        authContent: document.getElementById('authContent'),
        mainContent: document.getElementById('mainContent'),
        loginButton: document.getElementById('loginButton'),
        registerButton: document.getElementById('registerButton'),
        logoutButton: document.getElementById('logoutButton'),
        loggedInUser: document.getElementById('loggedInUser'),
        usernameInput: document.getElementById('username'),
        passwordInput: document.getElementById('password'),
        registerUsernameInput: document.getElementById('register-username'),
        registerPasswordInput: document.getElementById('register-password'),
        loginError: document.getElementById('loginError'),
        registerError: document.getElementById('registerError')
      };

      // 初始化函數
      async function init() {
        setupEventListeners();
        
        if (state.token) {
          await checkAuthStatus();
        } else {
          showAuthUI();
        }
      }

      // 檢查認證狀態
      async function checkAuthStatus() {
        try {
          const response = await fetch(`${baseUrl}/auth/check`, {
            headers: {
              'Authorization': `Bearer ${state.token}`
            }
          });
          
          if (response.ok) {
            showMainUI();
            await Promise.all([
              initCategoryOptions(),
              loadBookmarks(),
              fetchExercises(true) // 初始載入
            ]);
          } else {
            throw new Error('登入已過期');
          }
        } catch (error) {
          console.error('認證檢查失敗:', error);
          handleLogout();
        }
      }

      // 顯示登入界面
      function showAuthUI() {
        elements.authContent.classList.remove('hidden');
        elements.mainContent.classList.add('hidden');
        elements.logoutButton.classList.add('hidden');
        elements.loggedInUser.classList.add('hidden');
      }

      // 顯示主界面
      function showMainUI() {
        elements.authContent.classList.add('hidden');
        elements.mainContent.classList.remove('hidden');
        elements.logoutButton.classList.remove('hidden');
        elements.loggedInUser.textContent = state.username;
        elements.loggedInUser.classList.remove('hidden');
      }

      // 登入處理
      async function handleLogin() {
        const username = elements.usernameInput.value;
        const password = elements.passwordInput.value;
        
        elements.loginError.textContent = '';
        
        try {
          const response = await fetch(`${baseUrl}/auth/login`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password }),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '登入失敗');
          }
          
          const data = await response.json();
          state.token = data.token;
          state.username = username;
          
          localStorage.setItem('authToken', state.token);
          localStorage.setItem('username', username);
          
          await checkAuthStatus();
        } catch (error) {
          elements.loginError.textContent = error.message;
          console.error('登入錯誤:', error);
        }
      }

      // 註冊處理
      async function handleRegister() {
        const username = elements.registerUsernameInput.value;
        const password = elements.registerPasswordInput.value;
        
        elements.registerError.textContent = '';
        
        try {
          // 基本驗證
          if (!username || !password) {
            throw new Error('請填寫所有欄位');
          }
          
          if (username.length < 3 || username.length > 20) {
            throw new Error('用戶名長度應在3-20個字符之間');
          }
          
          if (!/^[a-zA-Z0-9]+$/.test(username)) {
            throw new Error('用戶名只能包含字母和數字');
          }
          
          if (password.length < 6) {
            throw new Error('密碼長度至少為6個字符');
          }

          const response = await fetch(`${baseUrl}/auth/signup`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password }),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '註冊失敗');
          }
          
          elements.registerError.textContent = '註冊成功，請登入';
          elements.registerError.style.color = 'var(--ion-color-success)';
          elements.registerUsernameInput.value = '';
          elements.registerPasswordInput.value = '';
        } catch (error) {
          elements.registerError.textContent = error.message;
          elements.registerError.style.color = 'var(--ion-color-danger)';
          console.error('註冊錯誤:', error);
        }
      }

      // 登出處理
      function handleLogout() {
        state.token = null;
        state.username = null;
        state.favorites = [];
        state.currentPage = 1;
        state.exercises = [];
        state.hasMore = true;
        state.showFavoritesOnly = false;
        elements.showFavoritesOnly.checked = false;
        localStorage.removeItem('authToken');
        localStorage.removeItem('username');
        showAuthUI();
      }

      // 載入收藏
      async function loadBookmarks() {
        if (!state.token) return;
        
        try {
          const response = await fetch(`${baseUrl}/bookmarks`, {
            headers: {
              'Authorization': `Bearer ${state.token}`
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            state.favorites = data.item_ids || [];
          }
        } catch (error) {
          console.error('載入收藏錯誤:', error);
        }
      }

      // 初始化分類選項
      async function initCategoryOptions() {
        try {
          const response = await fetch(`${baseUrl}/exercises/categories`);
          const categories = await response.json();
          elements.categoryFilter.innerHTML = `
            <ion-select-option value="">全部</ion-select-option>
            ${categories.map(cat => `
              <ion-select-option value="${cat}">${cat}</ion-select-option>
            `).join('')}
          `;
        } catch (error) {
          console.error('無法載入分類選項:', error);
        }
      }

      // 取得排序參數
      function getSortParams(sortValue) {
        const [field, order] = sortValue.split('_');
        return { field: field || 'title', order: order || 'asc' };
      }

      // 載入運動資料
      async function fetchExercises(initialLoad = false) {
        if (state.isLoading || !state.hasMore) return;
        
        state.isLoading = true;
        if (!initialLoad) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        try {
          const params = new URLSearchParams({
            page: state.currentPage,
            limit: state.itemsPerPage,
            search: state.searchQuery,
            category: state.selectedCategory,
            sort: state.sortField,
            order: state.sortOrder
          });

          const response = await fetch(`${baseUrl}/exercises?${params}`, {
            headers: {
              'Authorization': `Bearer ${state.token}`
            }
          });
          
          if (!response.ok) {
            throw new Error(response.status === 401 ? '登入已過期' : '資料載入失敗');
          }
          
          const data = await response.json();
          
          // 過濾只顯示收藏項目
          let itemsToAdd = data.items;
          if (state.showFavoritesOnly) {
            itemsToAdd = itemsToAdd.filter(item => state.favorites.includes(item.id));
          }
          
          if (initialLoad) {
            state.exercises = itemsToAdd;
          } else {
            state.exercises = [...state.exercises, ...itemsToAdd];
          }
          
          state.totalItems = data.pagination.total;
          state.hasMore = state.currentPage * state.itemsPerPage < state.totalItems;
          
          renderExercises();
          
          if (!initialLoad) {
            state.currentPage++;
            elements.infiniteScroll.complete();
          }
        } catch (error) {
          console.error('資料載入失敗:', error);
          if (error.message.includes('401')) {
            handleLogout();
          }
          elements.infiniteScroll.complete();
        } finally {
          state.isLoading = false;
        }
      }

      // 重置並重新載入數據
      async function resetAndLoadExercises() {
        state.currentPage = 1;
        state.hasMore = true;
        state.exercises = [];
        elements.exerciseList.innerHTML = '';
        await fetchExercises(true);
      }

      // 渲染運動列表
      function renderExercises() {
        // 先清空列表（如果是重置情況）
        if (state.currentPage === 1) {
          elements.exerciseList.innerHTML = '';
        }
        
        // 添加新項目
        state.exercises.forEach(exercise => {
          const item = document.createElement('ion-card');
          item.className = 'item-card';
          item.innerHTML = `
            <ion-card-header>
              <ion-card-title>${exercise.title}</ion-card-title>
              <ion-card-subtitle>${exercise.category}</ion-card-subtitle>
              <ion-button class="favorite-btn" fill="clear" 
                data-id="${exercise.id}" onclick="toggleFavorite(${exercise.id})">
                <ion-icon name="${state.favorites.includes(exercise.id) ? 'star' : 'star-outline'}"></ion-icon>
              </ion-button>
            </ion-card-header>
            <ion-card-content>
              <p>${exercise.description}</p>
              ${exercise.imageUrl ? `<img src="${exercise.imageUrl}" style="max-width: 100%;">` : ''}
              <div class="meta-info">
                <ion-chip>${exercise.duration} 分鐘</ion-chip>
                <ion-chip>難度: ${'★'.repeat(exercise.difficultyLevel)}</ion-chip>
              </div>
            </ion-card-content>
          `;
          elements.exerciseList.appendChild(item);
        });
        
        // 如果沒有項目且是收藏模式，顯示提示
        if (state.exercises.length === 0 && state.showFavoritesOnly) {
          const emptyMessage = document.createElement('ion-item');
          emptyMessage.innerHTML = `
            <ion-label class="ion-text-center">
              <h3>沒有收藏的項目</h3>
              <p>點擊星號圖標收藏你喜歡的運動</p>
            </ion-label>
          `;
          elements.exerciseList.appendChild(emptyMessage);
        }
      }

      // 事件監聽
      function setupEventListeners() {
        // 登入相關事件
        elements.loginButton.addEventListener('click', handleLogin);
        elements.registerButton.addEventListener('click', handleRegister);
        elements.logoutButton.addEventListener('click', handleLogout);
        
        // 無限滾動事件
        elements.infiniteScroll.addEventListener('ionInfinite', () => {
          state.currentPage++;
          fetchExercises();
        });
        
        // 收藏篩選器事件
        elements.showFavoritesOnly.addEventListener('ionChange', (e) => {
          state.showFavoritesOnly = e.detail.checked;
          resetAndLoadExercises();
        });
        
        // 篩選事件
        elements.searchInput.addEventListener('ionChange', (e) => {
          state.searchQuery = e.target.value;
          resetAndLoadExercises();
        });

        elements.categoryFilter.addEventListener('ionChange', (e) => {
          state.selectedCategory = e.target.value;
          resetAndLoadExercises();
        });

        elements.sortBy.addEventListener('ionChange', (e) => {
          const { field, order } = getSortParams(e.target.value);
          state.sortField = field;
          state.sortOrder = order;
          resetAndLoadExercises();
        });

        elements.refreshButton.addEventListener('click', () => {
          resetAndLoadExercises();
        });
      }

      // 收藏功能
      window.toggleFavorite = async function(id) {
        if (!state.token) {
          alert('請先登入');
          return;
        }
        
        const isCurrentlyFavorited = state.favorites.includes(id);
        
        try {
          const endpoint = `${baseUrl}/bookmarks/${id}`;
          const response = await fetch(endpoint, {
            method: isCurrentlyFavorited ? 'DELETE' : 'POST',
            headers: {
              'Authorization': `Bearer ${state.token}`,
              'Content-Type': 'application/json'
            },
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || (isCurrentlyFavorited ? '取消收藏失敗' : '收藏失敗'));
          }

          // 更新本地收藏列表
          if (isCurrentlyFavorited) {
            state.favorites = state.favorites.filter(favId => favId !== id);
          } else {
            state.favorites.push(id);
          }
          
          // 如果當前是只顯示收藏模式，更新列表
          if (state.showFavoritesOnly) {
            state.exercises = state.exercises.filter(ex => ex.id !== id);
            renderExercises();
          }
          
          // 更新UI
          const buttons = document.querySelectorAll(`.favorite-btn[data-id="${id}"]`);
          buttons.forEach(btn => {
            const icon = btn.querySelector('ion-icon');
            if (icon) {
              icon.name = state.favorites.includes(id) ? 'star' : 'star-outline';
            }
          });
        } catch (error) {
          console.error('收藏操作錯誤:', error);
          alert(error.message);
        }
      };

      init();
    });
  </script>
</body>
</html>
